#+title: Emacs Desktop Environment
#+PROPERTY: header-args:emacs-lisp :tangle ./desktop.el
#+PROPERTY: header-args :mkdirp yes
#+PROPERTY: header-args:sh   :tangle-mode (identity #o555)
#+PROPERTY: header-args:conf :tangle-mode (identity #o555)

This file contains additional configuration for my common desktop environment.

* Table of Contents
:PROPERTIES:
:TOC:      :include all :ignore this
:END:
:CONTENTS:
- [[#system-settings][System Settings]]
- [[#fonts-and-themes][Fonts and Themes]]
- [[#window-management][Window Management]]
  - [[#helper-functions][Helper Functions]]
  - [[#configuration][Configuration]]
  - [[#desktop-configuration][Desktop Configuration]]
  - [[#panel][Panel]]
  - [[#keybindings][Keybindings]]
  - [[#useful-links][Useful Links]]
- [[#desktop-notifications-via-dunst][Desktop Notifications via Dunst]]
- [[#automatic-disk-mounting-with-udiskie][Automatic Disk Mounting with Udiskie]]
- [[#display-management][Display Management]]
- [[#default-applications][Default Applications]]
- [[#user-services][User Services]]
- [[#applications][Applications]]
  - [[#audio-device-control][Audio Device Control]]
  - [[#desktop-tools][Desktop Tools]]
  - [[#system-tools][System Tools]]
  - [[#xorg-tools][Xorg Tools]]
- [[#desktop-profile][Desktop Profile]]
- [[#provide-the-dw-desktop-package][Provide the dw-desktop package]]
:END:

* Window Management
** EXWM Configuration
We use the excellent [[https://github.com/ch11ng/exwm][EXWM]] module as the basis for our Emacs Desktop Environment.  The [[https://github.com/ch11ng/exwm/wiki][EXWM Wiki]] is a great place to find tips about how to configure everything!

*NOTE:* Make sure you've installed =nm-applet=, =pasystray= and =blueman= for the system tray apps to work!

#+begin_src emacs-lisp
  (defun vk/exwm-init-hook ()
    ;; Make workspace 1 be the one where we land at startup
    (exwm-workspace-switch-create 1)

    (split-window-horizontally))

  (defun vk/exwm-update-class ()
    (exwm-workspace-rename-buffer exwm-class-name))

  (require 'exwm)
  ;; Set the default number of workspaces
  (setq exwm-workspace-number 5)

  ;; When window "class" updates, use it to set the buffer name
  (add-hook 'exwm-update-class-hook #'vk/exwm-update-class)

  ;; When EXWM starts up, do some extra confifuration
  (add-hook 'exwm-init-hook #'vk/exwm-init-hook)

  (start-process-shell-command "slock" nil "slock  xssG-lock -- slock &")
  (start-process-shell-command "setxkbmap" nil "setxkbmap -layout us,ru -option grp:ctrl_shift_toggle -option ctrl:nocaps")
  (start-process-shell-command "xrandr" nil "xrandr --output eDP-1 --primary --mode 1920x1080 --rate 60.00 --pos 0x0 --rotate normal --output DP-1 --mode 1920x1080 --rate 60.00 --pos 0x0 --rotate left --right-of eDP-1")

  (setq exwm-randr-workspace-monitor-plist '(1 "eDP-1" 2 "DP-1"))

  ;; Set the screen resolution (update this to be the correct resolution for your screen!)
  (require 'exwm-randr)
  (exwm-randr-enable)
  
  ;; Automatically send the mouse cursor to the selected workspace's display
  (setq exwm-workspace-warp-cursor nil)

  ;; Window focus should follow the mouse pointer
  (setq mouse-autoselect-window nil
        focus-follows-mouse nil)

  ;; These keys should always pass through to Emacs
  (setq exwm-input-prefix-keys
        '(?\C-x
          ?\C-u
          ?\C-h
          ?\M-x
          ?\M-`
          ?\M-&
          ?\M-:))

  ;; Ctrl+Q will enable the next key to be sent directly
  (define-key exwm-mode-map [?\C-q] 'exwm-input-send-next-key)

  ;; Set up global key bindings.  These always work, no matter the input state!
  ;; Keep in mind that changing this list after EXWM initializes has no effect.
  (setq exwm-input-global-keys
      `(([?\s-r] . exwm-reset)
        ([?\s-w] . exwm-workspace-switch)
        ,@(mapcar (lambda (i)
                    `(,(kbd (format "s-%d" i)) .
                      (lambda ()
                        (interactive)
                        (exwm-workspace-switch-create ,i))))
                  (number-sequence 0 9))))
  
  ;; run app via shell command
  (exwm-input-set-key (kbd "s-SPC")
                  (lambda (command)
                    (interactive (list (read-shell-command "$ ")))
                    (start-process-shell-command command nil command)))
                  
  (exwm-input-set-key (kbd "s-f") 'exwm-layout-toggle-fullscreen)
  (exwm-enable)
#+end_src

* Desktop Environment
** Launcher Script
At the end of the =.xinitrc= file, write a command to start Emacs and load the desktop environment configuration.

#+begin_src
exec dbus-launch --exit-with-session emacs -mm --debug-init -l ~/.emacs.d/desktop.el
#+end_src

** Desktop Key Bindings
We use the [[https://github.com/DamienCassou/desktop-environment][desktop-environment]] package to automatically bind to well-known programs for controlling the volume, screen brightness, media playback, and doing other things like locking the screen and taking screenshots.  Make sure that you install the necessary programs to make this functionality work!  Check the [[https://github.com/DamienCassou/desktop-environment#default-configuration][default programs]] list to know what you need to install.

#+begin_src emacs-lisp
  (with-eval-after-load 'exwm
    (require 'desktop-environment)
    (desktop-environment-mode 1)
    (setq desktop-environment-brightness-get-command "intel_backlight"
          desktop-environment-brightness-set-command "intel_backlight %s"
          desktop-environment-brightness-get-regexp ""
          desktop-environment-brightness-normal-increment "incr"
          desktop-environment-brightness-normal-decrement "decr"))
#+end_src

Make sure to install dependencies
#+begin_src
"scrot", "brightnessctl", "playerctl"*
#+end_src

** Tools
#+begin_src scheme :noweb-ref packages :noweb-sep ""
  "redshift" "gucharmap" "fontmanager" "brightnessctl" "xdg-utils"
  "xdg-dbus-proxy" "gtk+:bin" "glib:bin" "shared-mime-info"
#+end_src
